apply plugin: 'com.android.library'


dependencies {
    implementation 'org.jetbrains:annotations:15.0'
    implementation 'androidx.core:core:1.9.0'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation(name: 'billing-4.0.0', ext:'aar')
    implementation(name: 'common', ext:'aar')
    implementation(name: 'NativeFilePicker', ext:'aar')
    implementation(name: 'nrunityandroidpermission', ext:'aar')
    implementation(name: 'nrvirtualcontroller', ext:'aar')
    implementation(name: 'nr_api', ext:'aar')

}

android {
    compileSdkVersion 31
    buildToolsVersion '30.0.3'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 31
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
        versionCode 6
        versionName '0.0.5.e'
        consumerProguardFiles 'proguard-unity.txt', 'proguard-user.txt'
        resValue "string", "google_iap_license_key", "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsZlA1GR4EXXX8zRfqeaznXK2thMy1mndpvi1Uai7T3fXwV6JtrSlFrNkeu2DThYOHabFuKKTCGHCLQimPZHjvMFdBBsLbCCacXLK88SBUsWoboG7aOCH6hYrBdy/ORSHLtaPkpnHz3jnwGcXKYiMQKVW3uI/pUWD0B1bagMtF69BepbcTBFcvG8og+QAckkVy6zKNot3wzockkUxFzNiba/FvDBime0c1Ie+Kf0kaa0WmyYiwFReb6DidEokBQ9dXJYtztt1LwOrfgXcbm4yE8pY9b0QU7XCQZbUMETTZPAzYlE2aQybgNhanvBhH3dldd2ZULGLBa3gY2JEkgRk8QIDAQAB"
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    aaptOptions {
        noCompress = ['.unity3d', '.ress', '.resource', '.obb', '.bundle', '.unityexp'] + unityStreamingAssets.tokenize(', ')
        ignoreAssetsPattern = "!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    packagingOptions {
        doNotStrip '*/armeabi-v7a/*.so'
        doNotStrip '*/arm64-v8a/*.so'
        pickFirst '**/*.so'
    }
}

def getSdkDir() {
    Properties local = new Properties()
    local.load(new FileInputStream("${rootDir}/local.properties"))
    return local.getProperty('sdk.dir')
}

def BuildIl2Cpp(String workingDir, String configuration, String architecture, String abi, String[] staticLibraries) {
    def commandLineArgs = []
    commandLineArgs.add("--compile-cpp")
    commandLineArgs.add("--platform=Android")
    commandLineArgs.add("--architecture=" + architecture)
    commandLineArgs.add("--outputpath=" + workingDir + "/src/main/jniLibs/" + abi + "/libil2cpp.so")
    commandLineArgs.add("--libil2cpp-static")
    commandLineArgs.add("--baselib-directory=" + workingDir + "/src/main/jniStaticLibs/" + abi)
    commandLineArgs.add("--incremental-g-c-time-slice=3")
    commandLineArgs.add("--configuration=" + configuration)
    commandLineArgs.add("--dotnetprofile=unityaot-linux")
    commandLineArgs.add("--profiler-report")
    commandLineArgs.add("--profiler-output-file=" + workingDir + "/build/il2cpp_"+ abi + "_" + configuration + "/il2cpp_conv.traceevents")
    commandLineArgs.add("--print-command-line")
    commandLineArgs.add("--generatedcppdir=" + workingDir + "/src/main/Il2CppOutputProject/Source/il2cppOutput")
    commandLineArgs.add("--cachedirectory=" + workingDir + "/build/il2cpp_"+ abi + "_" + configuration + "/il2cpp_cache")
    commandLineArgs.add("--tool-chain-path=" + android.ndkDirectory)
    staticLibraries.eachWithIndex {fileName, i->
        commandLineArgs.add("--additional-libraries=" + workingDir + "/src/main/jniStaticLibs/" + abi + "/" + fileName)
    }
    def executableExtension = ""
    if (org.gradle.internal.os.OperatingSystem.current().isWindows())
        executableExtension = ".exe"
    exec {
        executable workingDir + "/src/main/Il2CppOutputProject/IL2CPP/build/deploy/il2cpp" + executableExtension
        args commandLineArgs
        environment "ANDROID_SDK_ROOT", getSdkDir()
    }
    delete workingDir + "/src/main/jniLibs/" + abi + "/libil2cpp.sym.so"
    ant.move(file: workingDir + "/src/main/jniLibs/" + abi + "/libil2cpp.dbg.so", tofile: workingDir + "/symbols/" + abi + "/libil2cpp.so")
}

android {
    task BuildIl2CppTask {
        doLast {
              BuildIl2Cpp(projectDir.toString().replaceAll('\\\\', '/'), 'Release', 'armv7', 'armeabi-v7a', [  ] as String[]);
              BuildIl2Cpp(projectDir.toString().replaceAll('\\\\', '/'), 'Release', 'arm64', 'arm64-v8a', [  ] as String[]);
        }
    }
    afterEvaluate {
        if (project(':unityLibrary').tasks.findByName('mergeDebugJniLibFolders'))
            project(':unityLibrary').mergeDebugJniLibFolders.dependsOn BuildIl2CppTask
        if (project(':unityLibrary').tasks.findByName('mergeReleaseJniLibFolders'))
            project(':unityLibrary').mergeReleaseJniLibFolders.dependsOn BuildIl2CppTask
    }
    sourceSets {
        main {
            jni.srcDirs = ["src/main/Il2CppOutputProject"]
        }
    }
}


    android.sourceSets.main.java.srcDirs += [
        'K:/Code/Nreal-Unity-Demos/Assets/NRSDK/Demos/RGBCamera/Scripts/GalleryDataProvider.java'
    ]

